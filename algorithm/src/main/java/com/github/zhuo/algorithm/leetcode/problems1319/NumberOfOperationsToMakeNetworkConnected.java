package com.github.zhuo.algorithm.leetcode.problems1319;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * https://leetcode.com/problems/number-of-operations-to-make-network-connected/
 *
 *
 */
public class NumberOfOperationsToMakeNetworkConnected {

    public static void main(String[] args) {
        //todo 并查集
        //以下测试案例没过
//        System.out.println(makeConnected(100, new int[][]{{17,51},{33,83},{53,62},{25,34},{35,90},{29,41},{14,53},{40,84},{41,64},{13,68},{44,85},{57,58},{50,74},{20,69},{15,62},{25,88},{4,56},{37,39},{30,62},{69,79},{33,85},{24,83},{35,77},{2,73},{6,28},{46,98},{11,82},{29,72},{67,71},{12,49},{42,56},{56,65},{40,70},{24,64},{29,51},{20,27},{45,88},{58,92},{60,99},{33,46},{19,69},{33,89},{54,82},{16,50},{35,73},{19,45},{19,72},{1,79},{27,80},{22,41},{52,61},{50,85},{27,45},{4,84},{11,96},{0,99},{29,94},{9,19},{66,99},{20,39},{16,85},{12,27},{16,67},{61,80},{67,83},{16,17},{24,27},{16,25},{41,79},{51,95},{46,47},{27,51},{31,44},{0,69},{61,63},{33,95},{17,88},{70,87},{40,42},{21,42},{67,77},{33,65},{3,25},{39,83},{34,40},{15,79},{30,90},{58,95},{45,56},{37,48},{24,91},{31,93},{83,90},{17,86},{61,65},{15,48},{34,56},{12,26},{39,98},{1,48},{21,76},{72,96},{30,69},{46,80},{6,29},{29,81},{22,77},{85,90},{79,83},{6,26},{33,57},{3,65},{63,84},{77,94},{26,90},{64,77},{0,3},{27,97},{66,89},{18,77},{27,43}}));
        System.out.println(makeConnected(100, new int[][]{{10,21},{42,46},{31,44},{57,93},{8,70},{30,77},{22,92},{13,62},{26,95},{10,56},{37,99},{67,78},{17,19},{6,55},{23,86},{58,84},{9,51},{7,17},{17,71},{17,79},{7,15},{34,43},{24,42},{17,82},{3,33},{19,81},{7,65},{50,56},{39,91},{25,54},{44,98},{41,61},{14,97},{38,76},{36,74},{46,57},{28,73},{17,89},{13,50},{0,68},{54,65},{21,33},{50,70},{60,70},{35,69},{4,91},{21,96},{0,50},{63,81},{9,57},{25,75},{17,97},{19,63},{71,73},{11,71},{21,65},{17,98},{16,98},{7,28},{12,15},{1,10},{21,50},{55,74},{11,15},{42,52},{8,59},{25,26},{49,71},{58,87},{42,76},{2,61},{25,89},{6,80},{52,91},{21,37},{3,29},{26,88},{9,55},{3,43},{18,76},{17,24},{24,96},{13,93},{21,29},{39,44},{49,50},{20,58},{28,41},{8,99},{45,48},{1,47},{25,85},{50,95},{10,73},{5,95},{22,80},{68,91},{38,78},{73,92},{59,60},{19,21},{50,68},{66,93},{52,70},{17,47},{2,81},{30,64},{69,82},{4,39},{3,42},{0,88},{16,77},{38,71},{52,81},{22,90},{23,27},{10,47},{12,32},{64,76},{27,71},{55,63},{35,61},{1,37}}
        ));
        System.out.println(makeConnected(100, new int[][]{{63,95},{30,57},{33,97},{44,60},{86,96},{8,86},{63,79},{3,60},{12,92},{70,74},{15,23},{10,35},{49,76},{14,90},{48,95},{19,84},{14,48},{11,15},{64,72},{74,93},{25,29},{85,97},{47,61},{62,64},{79,91},{16,35},{83,93},{93,99},{17,47},{14,96},{23,37},{28,42},{1,5},{48,87},{13,30},{60,65},{62,80},{64,69},{23,51},{33,49},{17,97},{7,25},{10,33},{6,88},{3,62},{97,99},{60,61},{55,71},{11,82},{31,40},{29,61},{25,59},{30,43},{12,54},{65,80},{56,61},{10,24},{3,93},{62,78},{31,86},{5,65},{20,83},{43,86},{11,95},{34,44},{95,98},{3,24},{8,69},{43,81},{52,95},{12,29},{49,65},{13,29},{69,91},{19,47},{33,71},{52,80},{9,57},{54,65},{45,90},{1,24},{44,88},{38,64},{49,67},{12,18},{7,36},{28,64},{60,64},{48,77},{23,95},{5,15},{24,62},{8,78},{36,65},{70,80},{22,24},{48,59},{23,45},{81,95},{18,97},{26,29},{37,80},{26,27},{25,39},{62,93},{12,56},{33,75},{18,48},{52,57},{25,94},{61,87},{65,89},{55,86},{12,88},{34,57},{8,72},{12,26},{27,92},{84,99},{45,85},{7,68},{1,12},{12,53}}
        ));
    }

    /**
     * 题目要求是移动 X 根线，而本解法是添加 X 根线 与题意不符
     */
    public static int makeConnected(int n, int[][] connections) {
        if (connections.length < n - 1){
            return -1;
        }
        List<Integer> lines = new ArrayList<>();
        for (int i = 0; i < connections.length; i++) {
            int[] connection = connections[i];
            if (!lines.contains(connection[0])){
                lines.add(connection[0]);
            }
            if (!lines.contains(connection[1])){
                lines.add(connection[1]);
            }
        }
        return n - lines.size() < 0 ? 0 : n - lines.size();
    }
}
